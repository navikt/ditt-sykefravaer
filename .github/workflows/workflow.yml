name: Push
on: push
env:
  APP: ditt-sykefravaer
jobs:
  build-and-publish:
    name: Bygg, test og push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Cache Cypress binary
        uses: actions/cache@v1
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-cypress-pr-${{ hashFiles('**/package.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-cypress-
      - name: Generer versjon og image navn
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=8 HEAD)
          VERSION=$TIME-$COMMIT
          echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: echo $VERSION > VERSION.txt
      - name: Last opp VERSION til neste job
        uses: actions/upload-artifact@v1
        with:
          name: VERSION.txt
          path: VERSION.txt
      - name: Install npm dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
      - name: Run tests
        run: npm run test:ci
      - name: Build application
        run: npm run build
      - name: Setup kernel for react native, increase watchers
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
      - name: Run cypress
        uses: cypress-io/github-action@v2
        with:
          install: false
          record: false
          start: npm run start-ingen-dekorator
          wait-on: http://localhost:8080/syk/sykefravaer/api/isAlive
      - uses: actions/upload-artifact@v1
        if: ${{ always() }}
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Login GCP dev
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')
        uses: google-github-actions/auth@v0.7.1
        with:
            credentials_json: ${{ secrets.STATIC_FILES_DEV }}
      - name: Last opp statiske filer til dev
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')
        uses: google-github-actions/upload-cloud-storage@v0.9.0
        with:
            path: .next/static
            parent: false
            destination: flex-static-files-dev/sykefravaer/_next/static
      - name: Login GCP prod
        if: github.ref == 'refs/heads/master'
        uses: google-github-actions/auth@v0.7.1
        with:
            credentials_json: ${{ secrets.STATIC_FILES_PROD }}
      - name: Last opp statiske filer til prod
        if: github.ref == 'refs/heads/master'
        uses: google-github-actions/upload-cloud-storage@v0.9.0
        with:
            path: .next/static
            parent: false
            destination: flex-static-files-prod/sykefravaer/_next/static
      - name: Docker login
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')  || startsWith(github.ref, 'refs/heads/labs-')
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
      - name: Bygg og push Docker image
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')  || startsWith(github.ref, 'refs/heads/labs-')
        run: |
            docker build . -f Dockerfile -t ${IMAGE}
            docker push ${IMAGE}

  deploy-to-dev-gcp:
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')
    name: Deploy to dev-gcp
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
      - name: Deploy to dev-gcp
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-gcp
          RESOURCE: nais-dev.yaml

  deploy-to-prod-gcp:
    if: github.ref == 'refs/heads/master'
    name: Deploy to prod-gcp
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
      - name: Deploy to prod-gcp
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-gcp
          RESOURCE: nais-prod.yaml

  deploy-to-labs-gcp:
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/dev-')
    name: Deploy to labs-gcp (Demo)
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
      - name: Deploy to labs-gcp
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: labs-gcp
          RESOURCE: nais-labs.yaml

  tag-image-as-latest:
    if: github.ref == 'refs/heads/master'
    name: Tag dockerimage as latest
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Last ned versjon
        uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
      - run: echo "LATEST=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:latest" >> $GITHUB_ENV
      - name: Tag and push docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker pull ${IMAGE}
          docker tag ${IMAGE} ${LATEST}
          docker push ${LATEST}
